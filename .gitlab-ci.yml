image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/docker:stable

stages:
  - pre-build
  - build
  - post-build
  - deploy
  - post-deploy

# When using dind, it's wise to use the overlays driver for improved performance.
variables:
  TEST_HELM_CHART_VERSION: "0.0.5"
  DOCKER_DRIVER: overlay2
  IMAGE_TAG_BACKEND: $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_REF_SLUG
  IMAGE_TAG_FRONTEND: $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_REF_SLUG
  IMAGE_TAG_BACKEND_SHA: $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHORT_SHA
  IMAGE_TAG_FRONTEND_SHA: $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHORT_SHA
  FF_ENABLE_BASH_EXIT_CODE_CHECK: "true"
  POSTGRES_CONTAINER_NAME: epr_tool_db
  POSTGRES_DB: epr-tool
  POSTGRES_USERNAME: epr-tool
  POSTGRES_PASSWORD: top-secret
  POSTGRES_PORT: 5432
  DOCKER_HOST: tcp://localhost:2375
  DOCKER_API_VERSION: "1.39"

services:
  - ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/docker:18.09-dind

backend:lint:
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/python:3.9-slim
  stage: pre-build
  tags:
    - low-load
  script:
    - cd backend
    - pip install flake8~=3.9.2 pep8-naming~=0.12.1 black==22.3.0 isort==5.9.3
    - ./scripts/lint.sh
  except:
    - /^helm[-/\/].*$/

backend:security-check:
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/python:3.9-slim
  stage: pre-build
  tags:
    - low-load
  script:
    - cd backend
    - ./scripts/packages_security_check.sh
  allow_failure: true
  except:
    - /^helm[-/\/].*$/

backend:build-and-push:
  stage: build
  needs: []
  tags:
    - normal-load
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build
      --compress
      --cache-from $CI_REGISTRY_IMAGE/backend:develop
      -t $IMAGE_TAG_BACKEND
      -t $IMAGE_TAG_BACKEND_SHA
      --build-arg BUILDKIT_INLINE_CACHE=1
      ./backend
    - docker push $IMAGE_TAG_BACKEND
    - docker push $IMAGE_TAG_BACKEND_SHA
  except:
    - /^helm[-/\/].*$/

backend:post-build-checks:
  stage: post-build
  needs: ["backend:build-and-push"]
  tags:
    - normal-load
  variables:
    GIT_STRATEGY: none
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker run
      --rm --entrypoint=/bin/bash
      -e USE_POSTGRES_DATABASE=False
      $IMAGE_TAG_BACKEND
      -c "./scripts/check_migrations.sh && ./scripts/check_graphql_schema.sh"

  except:
    - /^helm[-/\/].*$/

backend:test:
  stage: post-build
  needs: ["backend:build-and-push"]
  tags:
    - normal-load
  variables:
    GIT_STRATEGY: none
  before_script:
    # login to registry
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    # start DB container
    - docker run
      --name $POSTGRES_CONTAINER_NAME
      -d
      -e POSTGRES_DB=$POSTGRES_DB
      -e POSTGRES_USER=$POSTGRES_USERNAME
      -e POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      library/postgres:11.8-alpine
  script:
    # wait for db
    - sleep 5
    - docker run
      --rm
      --entrypoint=/bin/sh
      -e DATABASE_NAME=ptp
      -e DATABASE_USERNAME=$POSTGRES_USERNAME
      -e DATABASE_PASSWORD=$POSTGRES_PASSWORD
      -e DATABASE_HOST=$POSTGRES_CONTAINER_NAME
      -e DATABASE_PORT=$POSTGRES_PORT
      -e DJANGO_SESSION_COOKIE_SECURE=False
      --link $POSTGRES_CONTAINER_NAME
      $IMAGE_TAG_BACKEND
      ./scripts/test.sh
  after_script:
    # Stop DB container
    - docker stop $POSTGRES_CONTAINER_NAME
  except:
    - /^helm[-/\/].*$/

.deploy_helm_chart: &deploy_helm_chart
  - rancher login $RANCHER2_SERVER_URL --token $RANCHER2_ACCESS_KEY:$RANCHER2_SECRET_KEY --context $RANCHER2_CLUSTER_ID:$RANCHER2_PROJECT_ID
  - rancher apps upgrade
    --values ./charts/epr-registration-tool/values.$VALUES_ENVIRONMENT.yaml
    --set backend.db.password=$DB_PASSWORD
    --set backend.django.secretKey=$DJANGO_SECRET
    --set backend.image.tag=$CI_COMMIT_SHORT_SHA
    --set frontend.image.tag=$CI_COMMIT_SHORT_SHA
    --set forceRestartAt=${CI_JOB_ID} $RANCHER_APP_NAME $HELM_CHART_VERSION ||
    rancher apps install
    --namespace $NAMESPACE
    --values ./charts/epr-registration-tool/values.$VALUES_ENVIRONMENT.yaml
    --set backend.db.password=$DB_PASSWORD
    --set backend.django.secretKey=$DJANGO_SECRET
    --set backend.image.tag=$CI_COMMIT_SHORT_SHA
    --set frontend.image.tag=$CI_COMMIT_SHORT_SHA
    --version $HELM_CHART_VERSION
    --no-prompt $RANCHER2_PROJECT_ID:$CATALOG_NAME-$HELM_CHART_NAME $RANCHER_APP_NAME

deploy:test:
  stage: deploy
  tags:
    - low-load
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/rancher/cli2:v2.3.2
  variables:
    RANCHER2_CLUSTER_ID: c-rg9xd
    RANCHER2_PROJECT_ID: p-mcxjf
    CATALOG_NAME: epr-registration-tool-test
    HELM_CHART_NAME: epr-tool
    RANCHER_APP_NAME: epr-registration-tool-test
    NAMESPACE: epr-registration-tool-test
    VALUES_ENVIRONMENT: test
    HELM_CHART_VERSION: $TEST_HELM_CHART_VERSION
  environment:
    name: test
    url: https://api.epr-test.ambient.digital
  script:
    - *deploy_helm_chart
  only:
    - develop
  except:
    - /^helm[-/\/].*$/


frontend:lint:
  stage: pre-build
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/node:current-alpine
  tags:
    - low-load
  cache:
    key:
      files:
        - frontend/yarn.lock
        - frontend/.yarn/
    paths:
      - frontend/node_modules/
  script:
    - cd frontend
    - yarn install --frozen-lockfile --cache-folder .yarn
    - ./check_generated_types.sh
    - yarn lint
  except:
    - /^helm[-/\/].*$/


frontend:test:
  stage: pre-build
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/node:current-alpine
  tags:
    - normal-load
  needs:
    - frontend:lint
  cache:
    key:
      files:
        - frontend/yarn.lock
        - frontend/.yarn/
    paths:
      - frontend/node_modules/
  script:
    - cd frontend
    - yarn install --frozen-lockfile --cache-folder .yarn
    - yarn test:ci
  except:
    - /^helm[-/\/].*$/

frontend:security-check:
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/node:14-alpine
  stage: pre-build
  tags:
    - low-load
  script:
    - cd frontend
    # https://classic.yarnpkg.com/en/docs/cli/audit/#toc-yarn-audit - Only fail at "high" or "critical"
    - yarn audit --groups dependencies || if [ $? -lt 8 ]; then exit 0; else exit 1; fi
  allow_failure: true
  except:
    - /^helm[-/\/].*$/

frontend:build-and-push:
  stage: build
  needs:
    - frontend:lint
  tags:
    - normal-load
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build
      --compress
      --cache-from $CI_REGISTRY_IMAGE/frontend:develop
      -t $IMAGE_TAG_FRONTEND
      -t $IMAGE_TAG_FRONTEND_SHA
      --build-arg BUILDKIT_INLINE_CACHE=1
      ./frontend
    - docker push $IMAGE_TAG_FRONTEND
    - docker push $IMAGE_TAG_FRONTEND_SHA
  except:
    - /^helm[-/\/].*$/

helm:lint:
  stage: pre-build
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/alpine/helm
  tags:
    - low-load
  script:
    - cd charts/epr-registration-tool
    - helm lint .
  only:
    - /^helm[-/\/].*$/

# Run this job manually if you need to debug your helm chart as in, your pipeline passed just fine but your app got stuck in installing state in the rancher stating some error, complaining that something is wrong with your template. In that case, it is really helpful to see what are the actual kubernetes objects that your chart is trying to install that is causing the issue.
helm:render:
  stage: pre-build
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/alpine/helm:3.5.4
  tags:
    - low-load
  script:
    - cd charts/epr-registration-tool
    - echo "The rendering is done so that if linting for your helm chart passes but you see YAML error in the Rancher, you can have a look to renderings to see if something looks wrong, which makes it easy for you to debug."
    - echo "Rendering test values."
    - helm template --values values.test.yaml .
  only:
    - /^helm[-/\/].*$/

# Release with tags in this format: helm-1.0.0 (adjust version number)
helm:deploy:
  stage: deploy
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/alpine/helm
  tags:
    - low-load
  script:
    - VERSION=${CI_COMMIT_REF_SLUG:5}
    - VERSION=`echo $VERSION | tr - .`
    - cd charts/epr-registration-tool
    - helm package .
    - apk update
    - apk add curl
    - status=$(curl -i -X POST -s -o /dev/null -w "%{http_code}" -u "$CHARTMUSEUM_USER:$CHARTMUSEUM_PASSWORD" --data-binary "@epr-tool-$VERSION.tgz" https://chartmuseum.ambient-innovation.com/api/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/charts &> /dev/stdout) && if [ $status -gt 300 ]; then echo "Failed with HTTP CODE $status"; exit 1; else echo "success"; fi
  only:
    - /^helm[-/\/].*$/

# Edit RANCHER_CONTEXT_ID according to your own Rancher project. DO NOT LEAVE DEFAULT VALUE.
# See the link for further info: https://ambient327.sharepoint.com/sites/AmbientInnovationGmbH/_layouts/OneNote.aspx?id=%2Fsites%2FAmbientInnovationGmbH%2FFreigegebene%20Dokumente%2FGeneral%2FAMBIENT%20Knowledge%20Base&wd=target%2850.3%20%E2%80%93%20GitLab-CI%20Pipelines.one%7CA273004C-DD0F-4FAF-B13B-7C56670C2086%2FAuto-refresh%20helm-charts%20in%20Pipeline%7CA935A3D5-EDE1-426C-9029-421684800787%2F%29
helm:refresh:
  stage: post-deploy
  variables:
    RANCHER_CONTEXT_ID: c-rg9xd:p-mcxjf
  trigger:
    project: ai/rancher-catalog-refresh-cross-project-pipeline
    branch: trigger
  only:
    - /^helm[-/\/].*$/

check:deploy:test:
  stage: post-deploy
  tags:
    - low-load
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/alpine:3.14.1
  variables:
    RANCHER_CONTEXT_ID: c-rg9xd:p-mcxjf
    RANCHER_APP_NAME: epr-registration-tool-test
  script:
    - export RANCHER_PROJ_ID=$(echo $RANCHER_CONTEXT_ID | cut -d":" -f2-)
    - apk add curl
    - sleep 15
    - 'curl --location --request GET "$RANCHER2_SERVER_URL/project/$RANCHER_CONTEXT_ID/apps/$RANCHER_PROJ_ID:$RANCHER_APP_NAME" --header "Authorization: Bearer $RANCHER2_ACCESS_KEY:$RANCHER2_SECRET_KEY" > output.json'
    - cat output.json | grep transitioning | grep error > transitioning-error.log || true
    - '[ -s transitioning-error.log ] && echo "file not empty, there is an error" && (cat output.json | grep transitioningMessage) &&  exit 1 || echo "file empty, no error"'
    - echo "Please check Rancher > Your Project > Apps > Your App Name to see if there is any error."
    - echo "If you do not see any error, it is likely that deployment took longer and that is why the check failed. In that case, just re-run this job to see if it passes now."
  only:
    - develop
  except:
    - /^helm[-/\/].*$/
