apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "epr-tool.fullname" . }}-backend
  labels: # Every kubernetes object needs to have some common labels as shown below. If you are going to create new kubernetes object from scratch, please add these labels accordingly.
    app.kubernetes.io/name: {{ include "epr-tool.name" . }}-backend # Keep this label consistent with name metadata. You will most likely need to forecast "workshop" part according to _helpers.tpl file.
    helm.sh/chart: {{ include "epr-tool.chart" . }} # You would most likely only forecast "workshop" part accordingly to how it is named in _helpers.tpl file.
    app.kubernetes.io/instance: {{ .Release.Name }} # This is same for every kubernetes object. Do not forecast.
    app.kubernetes.io/managed-by: {{ .Release.Service }} # This is same for every kubernetes object. Do not forecast.
spec:
  replicas: {{ .Values.backend.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "epr-tool.name" . }}-backend
      app.kubernetes.io/instance: {{ .Release.Name }}
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "epr-tool.name" . }}-backend
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      {{ if $.Values.backend.serviceAccount.enabled }}
      serviceAccountName: {{ .Values.backend.serviceAccount.serviceAccountName }}
      {{ end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.backend.image.repository }}:{{ .Values.backend.image.tag }}"
          imagePullPolicy: {{ .Values.backend.image.pullPolicy }}
          env:
            - name: FORCE_RESTART_AT
              value: {{ .Values.forceRestartAt | quote }}
          envFrom:
            - configMapRef:
                name: {{ include "epr-tool.fullname" . }}-backend
                optional: false
            - secretRef:
                name: {{ include "epr-tool.fullname" . }}-backend
                optional: false
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
          livenessProbe: # Pay attention -> This setting let you configure a periodic check to make sure that your web app is still alive. If it is considered problematic, your web app automatically will be restarted.
            failureThreshold: 10 # The application will be unhealthy after this number of failures.
            httpGet: # You need to adjust where to send http get request according to your own application.
              httpHeaders:
                - name: Host
                  value: localhost
              path: /admin/
              port: 8000
              scheme: HTTP
            initialDelaySeconds: 30 # Wait number of seconds before performing first check.
            periodSeconds: 15 # Wait number of seconds between each check.
            successThreshold: 1
            timeoutSeconds: 15 # Number of seconds to wait for timeout on each request.
          readinessProbe: # Pay attention -> This setting is used to determine whether - for the initial boot of your application - your application is ready to start receiving traffic or not.
            failureThreshold: 10 # The application will be unhealthy after this number of failures.
            httpGet:
              httpHeaders:
                - name: Host
                  value: localhost
              path: /admin/
              port: 8000
              scheme: HTTP
            initialDelaySeconds: 30 # If your application needs a lot of initial delay (e.g. more than 10-15 seconds) check what is slowing the boot time and check if there is anything you can do to speed up the boot time. If you are not sure what to do, ask to Ops team for guidance.
            periodSeconds: 15
            successThreshold: 1
            timeoutSeconds: 15
          resources:
            {{- toYaml .Values.backend.resources | nindent 12 }}
          volumeMounts:
            - name: backend
              mountPath: "/mnt/secrets-store"
              readOnly: true
      volumes:
        - name: backend
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: {{ include "epr-tool.fullname" . }}-backend
      imagePullSecrets:
        - name: ai-registry
      {{- with .Values.backend.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app.kubernetes.io/name"
                    operator: In
                    values:
                      - {{ include "epr-tool.name" $ }}-backend
                  - key: "app.kubernetes.io/instance"
                    operator: In
                    values:
                    - {{ $.Release.Name }}
              topologyKey: "kubernetes.io/hostname"
      {{- with .Values.backend.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
