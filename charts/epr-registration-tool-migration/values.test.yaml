# Values for the epr registration tool test environment.
# Please do NOT include secrets here, so they are not
# exposed in version control. Please enter these as CI Variables
# and use --set in the gitlab-ci.yml to define them

nameOverride: ""
fullnameOverride: ""
forceRestartAt: ""

backend:
  replicaCount: 2
  image:
    repository: registry.ambient-innovation.com/giz/epr-registration-tool/backend
    tag: develop
    pullPolicy: Always
  command:
    - ./scripts/run_prod.sh
  django:
    debug: false
    allowedHosts: "127.0.0.1,localhost,.ambient.digital"
    secretKey: ""
    emailUrl: ""
    defaultFromMail: "noreply@ambient.digital"
    trustedCORSOrigins: "https://api.epr-tool.ambient.digital,https://epr-tool.ambient.digital,http://0.0.0.0:8000,http://localhost:8000,http://localhost:3000,http://127.0.0.1:3000"
    trustedCSRFOrigins: "https://api.epr-tool.ambient.digital,https://epr-tool.ambient.digital,http://0.0.0.0:8000,http://localhost:8000,http://localhost:3000,http://127.0.0.1:3000"
  aws:
    enabled: true
    bucketName: "epr-registration-tool-test"
    sesEnabled: true
    sesSourceARN: "arn:aws:ses:eu-central-1:501196553680:identity/ambient.digital"
  axes:
    enabled: true
    reset: false
    attempts: 5
    lockByUserAndIp: true
    useUserAgent: true
    adminSiteOnly: true
  db:
    enabled: true
    host: "ai-postgres-test-db.czkubjsaknys.eu-central-1.rds.amazonaws.com"
    port: "5432"
    name: "epr_registration_tool_test"
    username: "epr_registration_tool_test"
    password: ""
  sentry:
    dsn: "https://7a1d06be73b4421ab9456c0854312e94@sentry.ambient-innovation.com/80"
    environment: "test"
  rebuildFrontendTrigger:
    ref: "develop"  # pipeline or commit hash
    token: ""  # passed through in GitLab secrets
  resources:
    limits:
      cpu: 300m # When there are high number of request served, CPU usage goes much more above your baseline usage. In order to accomodate that, you can set 4 or 6 times of your baseline CPU usage, for example, if your request is 50m, make your limit 300m.  If your request is 200m, go for 800m.
      memory: 800Mi # Most applications more or less have stable memory usage, for that reason limit can be set close to your memory request. As a rule of thumb, you can use 1.5x or 2x of your request as a limit in order to accomodate occasional memory peaks.
    requests:
      cpu: 50m # Most workloads are idling most of the time, for that reason, you can request relatively low CPU as a baseline. Check out your workload metrics in Rancher to see what is approximately the baseline of CPU consumption.
      memory: 400Mi # For memory request, see your workload metrics in Rancher and set memory request slightly above baseline of your memory usage, for example, if your memory usage is around 360Mi, set your request 400Mi.
  livenessProbe: # Pay attention -> This setting let you configure a periodic check to make sure that your web app is still alive. If it is considered problematic, your web app automatically will be restarted.
    failureThreshold: 10 # The application will be unhealthy after this number of failures.
    httpGet: # You need to adjust where to send http get request according to your own application.
      httpHeaders:
        - name: Host
          value: localhost
      path: /admin/
      port: 8000
      scheme: HTTP
    initialDelaySeconds: 30 # Wait number of seconds before performing first check.
    periodSeconds: 15 # Wait number of seconds between each check.
    successThreshold: 1
    timeoutSeconds: 15 # Number of seconds to wait for timeout on each request.
  readinessProbe: # Pay attention -> This setting is used to determine whether - for the initial boot of your application - your application is ready to start receiving traffic or not.
    failureThreshold: 10 # The application will be unhealthy after this number of failures.
    httpGet:
      httpHeaders:
        - name: Host
          value: localhost
      path: /admin/
      port: 8000
      scheme: HTTP
    initialDelaySeconds: 30 # If your application needs a lot of initial delay (e.g. more than 10-15 seconds) check what is slowing the boot time and check if there is anything you can do to speed up the boot time. If you are not sure what to do, ask to Ops team for guidance.
    periodSeconds: 15
    successThreshold: 1
    timeoutSeconds: 15
  nodeSelector: { } # You will most likely will not need to add anything to nodeSelector, tolerations or affinity. These are often used for assigning your workload to specific instance, in most cases it is not needed for your web app.
  tolerations: [ ]
  affinity:
    nodeAffinity: { }
    podAffinity: { }
  serviceAccount:
    enabled: true
    serviceAccountName: epr-registration-tool

frontend:
  replicaCount: 2 # Keeping replica number 1 for test environment is fine if you can tolorate occasional down-times during maintenance and other service disruptions for your test environment.
  image:
    repository: registry.ambient-innovation.com/giz/epr-registration-tool/frontend
    tag: develop # This value will be overwritten by deployment job in gitlab-ci.yml. You do not need to forecast this.
    pullPolicy: Always
    forceRestartAt: ""
  resources: # Please note that, limits and requests should be properly set for your deployment. These values have to be changed accordingly. Comments regarding request and limits below are for a reference only, needs forecast according to different workloads, but if you have no idea at all, they can be good advice to start with.
    limits:
      cpu: 300m # When there are high number of request served, CPU usage goes much more above your baseline usage. In order to accomodate that, you can set 4 or 6 times of your baseline CPU usage, for example, if your request is 50m, make your limit 300m.  If your request is 200m, go for 800m.
      memory: 800Mi # Most applications more or less have stable memory usage, for that reason limit can be set close to your memory request. As a rule of thumb, you can use 1.5x or 2x of your request as a limit in order to accomodate occasional memory peaks.
    requests:
      cpu: 50m # Most workloads are idling most of the time, for that reason, you can request relatively low CPU as a baseline. Check out your workload metrics in Rancher to see what is approximately the baseline of CPU consumption.
      memory: 400Mi # For memory request, see your workload metrics in Rancher and set memory request slightly above baseline of your memory usage, for example, if your memory usage is around 360Mi, set your request 400Mi.
  livenessProbe: # Pay attention -> This setting let you configure a periodic check to make sure that your web app is still alive. If it is considered problematic, your web app automatically will be restarted.
    failureThreshold: 3 # The application will be unhealthy after this number of failures.
    httpGet: # You need to adjust where to send http get request according to your own application.
      path: /
      port: 3000
      scheme: HTTP
    initialDelaySeconds: 5 # Wait number of seconds before performing first check.
    periodSeconds: 5 # Wait number of seconds between each check.
    successThreshold: 1
    timeoutSeconds: 10 # Number of seconds to wait for timeout on each request.
  readinessProbe: # Pay attention -> This setting is used to determine whether - for the initial boot of your application - your application is ready to start receiving traffic or not.
    failureThreshold: 3
    httpGet:
      path: /
      port: 3000
      scheme: HTTP
    initialDelaySeconds: 5 # If your application needs a lot of initial delay (e.g. more than 10-15 seconds) check what is slowing the boot time and check if there is anything you can do to speed up the boot time. If you are not sure what to do, ask to Ops team for guidance.
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 10
  nodeSelector: { } # You will most likely will not need to add anything to nodeSelector, tolerations or affinity. These are often used for assigning your workload to specific instance, in most cases it is not needed for your web app.
  tolerations: [ ]
  affinity:
    nodeAffinity: { }
    podAffinity: { }

ingress:
  host:
    backend: api.epr-tool.ambient.digital
    frontend: epr-tool.ambient.digital

# Please USE INITJOB for performing your database migrations. This is make sure that your backends pods will boot faster and you will avoid many production issue that can occour related with this.
# Initjob will perform your database migrations and most of the time, resources consumed for database migrations are high. Observe metrics for your initjob from Rancher and see if you need to adjust these.
# Initjob will run once per deployment only.
# Initjob will use same image as your backend image.
initjob:
  enabled: true
  command: [ "/bin/scripts/migrations.sh" ]
  commandArgs: [ "" ]
  resources: # Please note that, limits and requests should be properly set for your deployment. These values have to be changed accordingly. Comments regarding request and limits below are for a reference only, needs forecast according to different workloads, but if you have no idea at all, they can be good advice to start with.
    limits:
      cpu: 300m
      memory: 800Mi
    requests:
      cpu: 50m
      memory: 400Mi

awsSecretManager:
  enabled: true